name: Deploy Environment

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - qa
      - main
    types:
      - closed  # Trigger when a pull request is closed (includes merged)

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read   # Default permission for accessing the repo

jobs:
  backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/dev') ||
      (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    environment: ${{ github.event_name == 'push' && 'dev' || github.event_name == 'pull_request' && github.event.pull_request.base.ref }}
    env:
      PROJECT_NAME: 'azurelanding'  # Sanitized project name (no hyphens)
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variable
        id: setenv
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            ENVIRONMENT="dev"
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            ENVIRONMENT="${{ github.event.pull_request.base.ref }}"
          fi
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: false
          enable-AzPSSession: false

      - name: Set Azure Subscription
        run: |
          echo "Setting Azure Subscription to: ${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create backend resources
        run: |
          # Retrieve environment variables
          environment="${{ env.ENVIRONMENT }}"
          project_name=$(echo "${{ env.PROJECT_NAME }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g')

          # Define variables for the backend resources
          az_backend_rg_name="${environment}-bkd-${project_name}"
          az_backend_sa_name="${environment}bkd${project_name}sa"
          az_backend_container_name="${environment}-bkd-${project_name}-co"
          az_location="SwitzerlandNorth"

          # Ensure storage account name is all lowercase and meets Azure's naming requirements
          az_backend_sa_name=$(echo "$az_backend_sa_name" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g')
          # Truncate to 24 characters
          az_backend_sa_name=${az_backend_sa_name:0:24}

          # Validate storage account name length
          if [ ${#az_backend_sa_name} -lt 3 ]; then
            echo "Error: Storage account name must be at least 3 characters."
            exit 1
          fi

          # Print variable values for debugging (avoid printing secrets)
          echo "Resource Group Name: $az_backend_rg_name"
          echo "Storage Account Name: $az_backend_sa_name"
          echo "Container Name: $az_backend_container_name"

          # Create resource group if it doesn't exist
          if ! az group exists --name "$az_backend_rg_name"; then
            az group create --name "$az_backend_rg_name" --location "$az_location"
          else
            echo "Resource group $az_backend_rg_name already exists."
          fi
          
          # Add a delay to ensure the resource group is created
          sleep 30

          # Create storage account if it doesn't exist
          if ! az storage account show --name "$az_backend_sa_name" --resource-group "$az_backend_rg_name" &>/dev/null; then
            az storage account create \
              --name "$az_backend_sa_name" \
              --resource-group "$az_backend_rg_name" \
              --location "$az_location" \
              --sku Standard_LRS
          else
            echo "Storage account $az_backend_sa_name already exists."
          fi
